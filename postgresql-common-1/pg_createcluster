#!/usr/bin/perl -w

# Create new PostgreSQL cluster or integrate an existing data directory into
# the postgresql-common infrastructure.
#
# (C) 2005 Martin Pitt <mpitt@debian.org>

use lib '/usr/share/postgresql-common';
use PgCommon;
use Getopt::Long;

# call initdb 
# Arguments: <version> <data directory> <owner uid> <owner gid>
sub init_db {
    $datadir = (-l $_[1]) ? readlink $_[1] : $_[1];

    if (system 'install', '-d', '-o', $_[2], '-g', $_[3], $datadir) {
        error 'could not create data directory';
    }

    $initdb = get_program_path 'initdb', $_[0];
    die 'Internal error: could not determine initdb path' unless $initdb;

    if (fork) {
        wait;
        error 'initdb failed' if $?;
    } else{
        close STDOUT;
        $( = $) = $_[3];
        $< = $> = $_[2];
        exec $initdb, '-D', $datadir, '-A', 'ident sameuser';
    }
}

# move a file to a directory with defined permissions
# Arguments: <source file> <target dir> <uid> <gid> <perms>
sub move_conffile {
    ($file, $target, $uid, $gid, $perms) = @_;
    if (-e $file) {
        print "Moving configuration file $file to $target...\n";
        if (system '/usr/bin/install', '-o', $uid, '-g', $gid, '-m', $perms, $file, $target) {
            error "move_conffile: could not install $file";
        }
        unlink $file;
    } else {
        error "move_conffile: required configuration file $file does not exist";
    }
}

#
# Execution starts here
#

# command line arguments

exit 1 unless GetOptions ('u|user=s' => \$owneruid, 'g|group=s' => \$ownergid);

if ($#ARGV < 1) {
    print "Usage: $0 [-u <uid>] [-g <gid>] <version> <cluster name> [<data directory>]\n";
    exit 1;
}

if ($owneruid) {
    $owneruid = (getpwnam $owneruid)[2] unless $owneruid =~ /\d+/;
} else {
    $owneruid = $>;
}

if ($ownergid) {
    $ownergid = (getgrnam $ownergid)[2] unless $ownergid =~ /\d+/;
} else {
    $ownergid = (getpwuid $owneruid)[3];
}

error 'clusters must not be owned by root' unless $owneruid && $ownergid;

($version, $cluster, $datadir) = @ARGV;
$datadir ||= "/var/lib/postgresql/$version/$cluster";
$confdir = "$PgCommon::confroot/$version/$cluster";
$pgdata = "$confdir/pgdata";

# some sanity checks
error "invalid version: $version" unless get_program_path 'initdb', $version;
error 'cluster configuration already exists' if -d $confdir && <$confdir/*>;

# create configuration directory
error 'could not create data directory' if system ('install', '-d', $confdir);
symlink $datadir, $pgdata;

if (-f "$pgdata/PG_VERSION") {
    if (open F, "$pgdata/PG_VERSION") {
        $existingver = <F>;
        close F;
    } else {
        error "could not open $pgdata/PG_VERSION";
    }
    if ($existingver = $version) {
        print "Configuring already existing cluster (configuration: $confdir, data: $datadir)\n";
    } else {
        error "$datadir already contains a version $existingver cluster";
    }
} else {
    print "Creating new cluster (configuration: $confdir, data: $datadir)...\n";
    init_db $version, $pgdata, $owneruid, $ownergid;
}

# move conffiles, setup permissions
move_conffile "$datadir/pg_hba.conf", $confdir, $owneruid, $ownergid, "640";
move_conffile "$datadir/pg_ident.conf", $confdir, $owneruid, $ownergid, "640";
move_conffile "$datadir/postgresql.conf", $confdir, $owneruid, $ownergid, "644";

__END__

=head1 NAME

pg_createcluster - create a new PostgreSQL cluster

=head1 SYNOPSIS

B<pg_createcluster> [B<-u> I<user>] [B<-g> I<group>] I<version> I<name>
[I<data dir>]

=head1 DESCRIPTION

B<pg_createcluster> creates a new PostgreSQL server cluster (i. e. a
collection of databases served by a B<postmaster> instance) and
integrates it into the multi-version/multi-cluster architecture of the
B<postgresql-common> package. 

Given a major PostgreSQL I<version> (like "7.4" or "8.0") and a cluster I<name>
(which must be unique for all clusters of one particular version), it creates
the necessary configuration files in
B</etc/postgresql/>I<version>B</>I<name>B</>; in particular these are
B<postgresql.conf>, B<pg_ident.conf>, B<pg_hba.conf>, and a symbolic link
B<pgdata> which points to the actual data directory I<data dir> (which defaults
to B</var/lib/postgresql/>I<version>B</>I<name>B</>).

If I<data dir> does not yet exist, PostgreSQL's B<initdb> command is used to
generate a new cluster structure. If the data directory already exists, it is
integrated into the B<postgresql-common> structure by moving the configuration
file and creating the B<pgdata> link.

By default, the cluster owner will be the user running B<pg_createcluster>.
However, if this program is called as root, then the cluster owner user and
group must be set with B<-u> and B<-g>. A cluster must not be owned by root.

=head1 SEE ALSO

L<pg_ctlcluster(8)>, L<pg_lsclusters(1)>, L<pg_wrapper(1)>

=head1 AUTHOR

Martin Pitt L<E<lt>mpitt@debian.orgE<gt>>
