#!/usr/bin/perl -w

# Create new PostgreSQL cluster or integrate an existing data directory into
# the postgresql-common infrastructure.
#
# (C) 2005 Martin Pitt <mpitt@debian.org>

use lib '/usr/share/postgresql-common';
use PgCommon;
use Getopt::Long;

# call initdb 
# Arguments: <version> <data directory> <owner uid> <owner gid>
sub init_db {
    $datadir = (-l $_[1]) ? readlink $_[1] : $_[1];

    if (system 'install', '-d', '-o', $_[2], '-g', $_[3], $datadir) {
        error 'could not create data directory';
    }

    $initdb = get_program_path 'initdb', $_[0];
    die 'Internal error: could not determine initdb path' unless $initdb;

    if (fork) {
        wait;
        error 'initdb failed' if $?;
    } else{
        close STDOUT;
        $( = $) = $_[3];
        $< = $> = $_[2];
        exec $initdb, '-D', $datadir, '-A', 'ident sameuser';
    }
}

# move a file to a directory with defined permissions
# Arguments: <source file> <target dir> <uid> <gid> <perms>
sub move_conffile {
    ($file, $target, $uid, $gid, $perms) = @_;
    if (-e $file) {
        print "Moving configuration file $file to $target...\n";
        if (system '/usr/bin/install', '-o', $uid, '-g', $gid, '-m', $perms, $file, $target) {
            error "move_conffile: could not install $file";
        }
        unlink $file;
    } else {
        error "move_conffile: required configuration file $file does not exist";
    }
}

#
# Execution starts here
#

# command line arguments

$owneruid = $>;
$ownergid = $);
exit 1 unless GetOptions ('u|user=s' => \$owneruid, 'g|group=s' => \$ownergid);

if ($#ARGV < 1) {
    print "Usage: $0 [-u <uid>] [-g <gid>] <version> <cluster name> [<data directory>]\n";
    exit 1;
}

$owneruid = (getpwnam $owneruid)[2] unless $owneruid =~ /\d+/;
$ownergid = (getgrnam $ownergid)[2] unless $ownergid =~ /\d+/;

error 'clusters must not be owned by root' unless $owneruid && $ownergid;

($version, $cluster, $datadir) = @ARGV;
$datadir ||= "/var/lib/postgresql/$version/$cluster";
$confdir = "$PgCommon::confroot/$version/$cluster";
$pgdata = "$confdir/pgdata";

# some sanity checks
error "invalid version: $version" unless get_program_path 'initdb', $version;
error 'cluster configuration already exists' if -d $confdir && <$confdir/*>;

# create configuration directory
error 'could not create data directory' if system ('install', '-d', $confdir);
symlink $datadir, $pgdata;

if (-f "$pgdata/PG_VERSION") {
    if (open F, "$pgdata/PG_VERSION") {
        $existingver = <F>;
        close F;
    } else {
        error "could not open $pgdata/PG_VERSION";
    }
    if ($existingver = $version) {
        print "Configuring already existing cluster (configuration: $confdir, data: $datadir)\n";
    } else {
        error "$datadir already contains a version $existingver cluster";
    }
} else {
    print "Creating new cluster (configuration: $confdir, data: $datadir)...\n";
    init_db $version, $pgdata, $owneruid, $ownergid;
}

# move conffiles, setup permissions
move_conffile "$datadir/pg_hba.conf", $confdir, $owneruid, $ownergid, "640";
move_conffile "$datadir/pg_ident.conf", $confdir, $owneruid, $ownergid, "640";
move_conffile "$datadir/postgresql.conf", $confdir, $owneruid, $ownergid, "644";
