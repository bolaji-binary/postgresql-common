# This file contains common functionality for all postgresql server
# package init.d scripts. It is usually included by
# /etc/init.d/postgresqlX.Y.

# Make sure the log directory and file exist with the correct ownership
# needs correct $VERSION and $CLUSTER
assert_logfile() {
    if [ -z "$VERSION" -o -z "$CLUSTER" ]; then
        echo -e "\nError: assert_logfile called without proper \$VERSION and \$CLUSTER" >&2
        exit 1
    fi

    LOGFILE="/var/log/postgresql/postgresql-$VERSION-$CLUSTER.log"
    LOGDIR=$(dirname "$LOGFILE")

    [ -d "$LOGDIR" ] || install -d -m 2775 -o root -g postgres "$LOGDIR"

    if [ ! -e "$LOGFILE" ]; then
        touch "$LOGFILE"
        chown postgres.postgres "$LOGFILE"
        chmod 640 "$LOGFILE"
    fi
}

# Get $PGDATA path, $PG_VERSION, and $PG_CTL path from given version ($1) and
# cluster name ($2) and check that the cluster data exists.
prepare_cluster() {
    PGDATA=/etc/postgresql/$1/$CLUSTER/pgdata
    if [ ! -d $PGDATA ]; then
        echo "Error: symbolic link $PGDATA to data directory does not exist, exiting" >&2
        exit 1
    fi

    if [ ! -f $PGDATA/PG_VERSION ]; then
        echo "Error: $PGDATA does not seem to contain a PostgreSQL cluster (PG_VERSION is missing)" >&2
        exit 1
    fi
    PG_VERSION=$(< $PGDATA/PG_VERSION)

    if [ "$1" != $PG_VERSION ]; then
        echo "Error: $PGDATA/PG_VERSION is $PG_VERSION, but configuration directory is for version $1)" >&2
        exit 1
    fi

    PG_CTL=/usr/lib/postgresql/$PG_VERSION/bin/pg_ctl
}

# start cluster $2 of version $1
# output is appropriate after "Starting ...:" init message
start_ver_cluster() {
    prepare_cluster $1 $2
    echo -n " $2"
    assert_logfile

    ERRMSG=$(/sbin/start-stop-daemon --pidfile $PGDATA/postmaster.pid \
        --oknodo --chuid postgres --exec $PG_CTL --start -- \
        -D $PGDATA -l $LOGFILE -s start 2>&1)

    if [ $? != 0 ]; then
        echo "(FAILED)"
        [ "$ERRMSG" ] && echo -e "\nERROR: $ERRMSG" >&2 || true
        exit 1
    fi

    [ "$ERRMSG" ] && echo -n "($ERRMSG)" >&2 || true
}

# stop cluster $2 of version $1
# output is appropriate after "Stopping ...:" init message
stop_ver_cluster() {
    prepare_cluster $1 $2
    echo -n " $2"

    start-stop-daemon -c postgres --start --exec $PG_CTL -- -D "$PGDATA" stop -s -w -m fast

    # try harder if "fast" mode does not work
    if [ -f "$PGDATA/postmaster.pid" ]; then
        echo -n "(does not shutdown gracefully, now stopping immediately)"
        start-stop-daemon -c postgres --start --exec $PG_CTL -- -D "$PGDATA" stop -s -w -m immediate
    fi

    # if that still not helps, use the big hammer
    if [ -f "$PGDATA/postmaster.pid" ]; then
        echo -n "(does not shutdown, killing the process)"
        PID=`head -n 1 "$PGDATA/postmaster.pid"`
        if [ "$PID" ]; then
            kill -9 "$PID" || true
            rm -f "$PGDATA/postmaster.pid"
        fi
    fi
}

# reload cluster $2 of version $1
# output is appropriate after "Reloading ...:" init message
reload_ver_cluster() {
    prepare_cluster $1 $2
    echo -n " $2"

    ERRMSG=$(start-stop-daemon --chuid postgres --start \
        --exec $PG_CTL -- -D $PGDATA -s reload)

    if [ $? != 0 ]; then
        echo "(FAILED)"
        [ "$ERRMSG" ] && echo "ERROR: $ERRMSG" >&2 || true
        exit 1
    fi

    [ "$ERRMSG" ] && echo -n " ($ERRMSG)" >&2 || true
}

# print status of cluster $2 of version $1
status_ver_cluster() {
    prepare_cluster $1 $2

    echo "-- Status of cluster $PG_VERSION/$CLUSTER:"
    start-stop-daemon --chuid postgres --start --exec $PG_CTL -- -D $PGDATA status
}

# do command/function $1 to all clusters of version $2 with command
# description $3; output according to Debian Policy for init scripts
do_op_all() {
    [ "$1" ] || { echo "Error: invalid command '$1'" >&2; exit 1; }
    [ "$2" -a -d "/etc/postgresql/$2" ] || { echo "Error: invalid version '$2'" >&2; exit 1; }
    [ -z "$3" ] || echo -n "$3 PostgreSQL $2 database server:"

    for c in /etc/postgresql/"$2"/*; do
	$1 $2 $(basename $c)
    done

    [ -z "$3" ] || echo "."
}

# start all clusters of version $1
# output according to Debian Policy for init scripts
start() {
    do_op_all start_ver_cluster $1 "Starting"
}

# stop all clusters of version $1
# output according to Debian Policy for init scripts
stop() {
    do_op_all stop_ver_cluster $1 "Stopping"
}

# reload all clusters of version $1
# output according to Debian Policy for init scripts
reload() {
    do_op_all reload_ver_cluster $1 "Reloading"
}

# display status all clusters of version $1
status() {
    do_op_all status_ver_cluster $1 
}

